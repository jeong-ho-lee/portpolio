1.

데이터베이스 - 공유, 구조, 통합

데이터는 프로그램의 질의에 의해 정보로 변환
질의? - 사용자가 원하는 정보를 데이터베이스에 요구

스키마? - 데이터베이스 구조, 모든 가능한 상태를 미리 정의, 내포 EX) DEPARTMENT 데이터베이스에는 (DEPTNO, DEPTNAME, FLOOR) 등의 요소들이 있다. 이 요소들은 특별한 상황이 아니고서는 새로 추가되거나 수정되지 않는다.
메타데이터? - 데이터에 대한 설명
상태? - 데이터베이스 내용, 시간이 지남에 따라 계속해서 바뀜, 외연

시스템 카탈로그? - 메타 데이터들을 모아둔 시스템 테이블의 집합

독립성? - 응용 시스템과 데이터베이스가 분리되어 있어서 둘 중의 하나의 정보가 바뀌어서 다른 곳에서 수정되지 않는다
무결성? - 조건에 맞지 않는 값은 저장하지 않는다

화일 시스템 vs DBMS

화일 시스템
단점 - 데이터 중복, 동시성 제어 x, 질의어 x, 독립성 x

동시성 제어? - 동시에 여러 사용자들이 한 데이터베이스에 접근하여 사용할 수 있는 것

DBMS
장점 - 화일 시스템의 단점
단점 - 비쌈

발전 과정 - 계층 > 네트워크 > 관계 > 객체 지향 > 객체 관계

계층 - 트리 구조
네트워크 - 그래프 구조
계층은 트리 구조라 한 레코드는 한 개의 부모 레코드만 가질 수 있고, 네트워크는 그래프 구조라 사이클이 존재하여 여러 개의 부모 레코드를 가질 수 있음

데이터 정의어 - 데이터 정의어를 이용하여 데이터베이스 스키마를 정의
데이터 조작어 - 데이터 검색, 수정, 삽입, 삭제
데이터 제어어 - 트랜잭션 명시, 권한을 부여하거나 취소

외부 뷰 - 결론적으로 사용자가 질의를 통해 보는 것
사상 - 단계와 단계를 잇는 맵핑 과정

논리적 데이터 독립성 - 개념의 변화가 외부와 독립
물리적 데이터 독립성 - 내부의 변화가 개념과 독립

2.

릴레이션 - 2차원 테이블
레코드 - 릴레이션 각 행
튜플 = 레코드
어트리뷰트 - 릴레이션 각 열
카디날리티 - 튜플의 개수
차수 - 어트리뷰트의 개수
도메인 - 한 어트리뷰트에 나타낼 수 있는 값들의 집합으로, 원자값 (리스트나 튜플이 아닌 int, char 같은 더 이상 나눌 수 없는 값으로 자료형과 비슷하다)이다. ex) 사원 이름에는 char형 데이터만 들어올 수 있다.
스키마 - 릴레이션의 이름과 어트리뷰트들의 집합. ex) 릴레이션 이름(어트리뷰트1, 어트리뷰트2, ... 어트리뷰트 N)
인스턴스 - 릴레이션의 현 상태로 어느 시점에 들어 있는 튜플들의 집합.

키 - 각 튜플을 고유하게 식별할 수 있는 하나 이상의 어트리뷰트들의 집합, 슈퍼 키, 후보 키, 기본 키, 대체 키, 외래 키가 있음
슈퍼 키 - 고유하게 식별하는
후보 키 - 고유하게 식별하는 최소한의, 2개 이상의 어트리뷰트로 구성되어 있을 경우 복합 키라고 함
기본 키 - 후보 키가 2개 이상 있으면 하나를 골라 기본 키로 선정, 마땅한 게 없으면 인위적으로 추가하기도 함, 기본키는 NULL 값이 포함되어 있으면 안되며 시간이 지나도 변경되거나 중복이 발생하면 안되고 짧은 형태로 표현되는 것이 좋음
대체 키 - 기본 키가 아닌 후보 키
외래 키 - 어떤 릴레이션의 기본 키를 참조하는 어트리뷰트. EX) A 릴레이션의 기본 키를 B 릴레이션이 참조했다면 B 릴레이션이 참조한 키는 외래 키. 다른 릴레이션의 기본 키를 참조할 수도 있지만 자신의 기본 키를 참조할 수도 있음. 또한 2개 이상의 다른 릴레이션의 기본 키들을 참조하여 복합 키의 형태로 외래 키를 사용할 수도 있음

도메인 제약 조건 - 각 어트리뷰트 값이 반드시 원자값이어야 하고 디폴트 값, 범위를 지정할 수 있음. 데이터 형식으로 유형을 제한하고 CHECK을 통해 범위를 제한함.
키 제약 조건 - 중복된 키 값이 존재해서는 안됨
엔티티 무결성 제약 조건 - 기본 키는 튜플 식별을 위해 사용되기 때문에 절대 NULL값을 가질 수 없다. 대체 키는 상관 X
참조 무결성 제약 조건 - 외래 키 값은 참조 릴레이션의 어떤 기본 키 값과 같다 OR NULL값 대신 NULL값 가지려면 기본 키일 수 없음

삽입 - 참조되는 릴레이션에 새로운 튜플이 삽입되면 위배 X, 참조하는 릴레이션은 제약 조건 전부 위배 가능
삭제 - 참조하는 릴레이션에 튜플이 삭제되면 위배 X, 참조되는 릴레이션은 참조 무결성 제약 조건 위배 가능
참조 무결성 제약 조건을 만족시키기 위해 DBMS는 단순히 연산을 거절하거나 (제한) 삭제한 튜플을 참조하는 튜플도 삭제하는 방법 (연쇄)을 사용한다. 또한, 삭제되는 튜플을 참조하는 튜플의 외래 키 값에 NULL값이나 DEFAULT값을 넣는 방법도 있다
수정 - 수정하는 어트리뷰트가 기본 키나 외래 키가 아니라면 참조 무결성 제약 조건을 지켜진다.

4 - 1.

필 설렉션 - σ, 원하는 튜플을 골라냄, 차수가 동일, 카디날리티는 작거나 같음
필 프로젝션 - π, 원하는 어트리뷰트를 골라냄, 차수, 카디날리티 모두 작거나 같음 (중복)
필 합집합 - R ∪ S = T, 합집합 호환 (차수가 동일, 모든 어트리뷰트의 도메인 동일), 차수는 R 또는 S와 동일, 카디날리티는 R + S >= T >= Max(R, S)
필 차집합 - R − S = T, 합집합 호환, 차수는 R 또는 S와 동일, 카디날리티는 R >= T >= 0
필 카티션 곱 - R ⨉ S = T, R과 S의 튜플들의 모든 가능한 조합으로 이루어진 릴레이션, 차수는 R + S, 카디날리티는 R * S
교집합 - R ∩ S = T, 합집합 호환, 차수는 R 또는 S와 동일, 카디날리티는 Min(R, S) >= T >= 0
세타 조인 - R ⋈ R.Ai Θ S.Bj S ≡ σR.Ai Θ S.Bj(R × S)
동등 조인 - R ⋈ R.Ai = S.Bj S = T, R ⨉ S에서 조건을 만족하는 튜플들만 설렉션, 차수는 R + S, 카디날리티는 Min(R, S)보다 작거나 같음
자연 조인 - R * R.Ai = S.Bj S = T, 동등 조인에서 중복되는 어트리뷰트를 제거, 차수는 R + S - 겹친 어트리뷰트, 카디날리티는 Min(R, S)보다 작거나 같음
세미 조인 - ⋉
디비전 - R ÷ S = T, S의 튜플이 R의 튜플에 속한 R의 튜플들에서 S의 튜플을 제거, 차수는 R - S, 카디날리티는 R보다 작거나 같음
그룹화 - R.A G F(S.B) (T), 어트리뷰트와 집단 함수 사용
외부 조인 - R ⟕ S = T, 자연 조인을 하는데 기호가 향한 쪽, R의 모든 튜플들을 포함하고 없는 어트리뷰트는 NULL값으로 표현, 차수는 R + S - 겹친 어트리뷰트, 카디날리티는 Min(R, S)보다 작거나 같음. 완전 외부 조인이면 Max(R, S)보다 작거나 같음
- 필수 연산자로 표현

a. πGENRE(σTITLE = '반지의 제왕'(VIDEO))
b. πVIDEO_ID(RESERVED)
c. πVIDEO_ID(VIDEO) - πVIDEO_ID(RESERVED)
d. πTITLE(πVIDEO_ID, TITLE(VIDEO) * VIDEO_ID = VIDEO_ID πVIDEO_ID(RESERVED))
e. πNAME(πCUSTOMER_ID, NAME(CUSTOMER) * CUSTOMER_ID = CUSTOMER_ID πCUSTOMER_ID(RESERVED))
f. πADDRESS(πCUSTOMER_ID, ADDRESS(CUSTOMER) * CUSTOMER_ID = CUSTOMER_ID πCUSTOMER_ID(πVIDEO_ID(σGENRE = '액션'(VIDEO)) * VIDEO_ID = VIDEO_ID πCUSTOMER_ID, VIDEO_ID(RESERVED)))
g. πVIDEO_ID(σGENRE = '다큐멘터리'(πGENRE, VIDEO_ID(VIDEO))) AS A
πCUSTOMER_ID, VIDEO_ID(RESERVED) AS B
πCUSTOMER_ID(CUSTOMER) - πCUSTOMER_ID(A × πCUSTOMER_ID(CUSTOMER)) - πA.VIDEO_ID, CUSTOMER_ID(σA.VIDEO_ID = B.VIDEO_ID(A × B))) AS C
πNAME(σCUSTOMER.CUSTOMER_ID = C.CUSTOMER_ID(CUSTOMER))

4 - 2.

CREATE - 생성
ALTER - 변경
DROP - 삭제, RESTRICT - 제한, CASCADE - 연쇄 (데이터 정의어로 스키마를 대상으로 한 명령)
CHECK를 이용해서 무결성 제약 조건
NO ACTION - 무시, CASCADE - 연쇄, SET NULL - NULL값으로 설정, SET DEFAULT - DEFAULT값으로 설정 (릴레이션을 대상으로 한 명령)
DISTINCT - 중복 제거
LIKE '%A%' - A가 포함된 모든 값
LIKE 'A_' - Ax 형태의 모든 값 (글자 수, 위치 제한)
A BETWEEN B AND C - A는 어트리뷰트, B, C는 숫자
DNO IN (1, 2) == DNO = 1 OR DNO = 2 (리스트)
DNO = NULL (X) DNO IS NULL (O)
HAVING은 GROUP BY를 쓸 때 쓰고 WHERE은 조인을 쓸 때 씀
트리거 - 특정 이벤트가 발생할 때마다 자동으로 수행, Event - Condition - Action ECA
주장 - 제약 조건을 위반했을 때 수행
A || B - 연결해줌
A JOIN B ON (A ? B) - 조인 조건, FROM에서 사용