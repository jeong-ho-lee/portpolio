데이터베이스 - 공유 구조 통합 (키워드)

파일 시스템 vs DBMS
레코드 - 예) 학생 한 명의 정보
파일은 데이터를 처리해줄 수 없고 응용 프로그램이 해줘야됨 그래서 의존도가 높음
예) C++이면 파일 객체 만들어서 SPLIT하고 등등... 
정의를 포함한 다른 모든 프로그램들도 수정이 이뤄져야 함
데이터의 불일치가 이뤄져 데이터를 신뢰할 수 없게 됨
= 공간적인 불효율성도 존재 - 똑같은 파일이 존재함 (중복)

동시성 - 동시에 여러 사람들이 사용하려 하면 이미 파일이 열려 있다고 나옴
파일 시스템은 질의어를 이용하지 않는다
= 시간이 오래 걸린다, 사용하는 사람 입장에서 쉽지 않다

파일 시스템의 단점 = DBMS의 장점

트랜잭션 = 하나의 작업 단위

24PG *

오버헤드 = 어떤 처리를 하기 위해 들어가는 간접적인 처리 시간, 메모리

계층 데이터베이스 = 부모가 둘인 경우는 표현을 할 수가 없음 - 따라서 그러기 위해서는 2개 이상의 부모를 가지는 LEAF 같은 경우에는 데이터 중복이 발생할 수 밖에 없음

트리 vs 그래프 = 그래프에는 CYCLE이 존재 = 부모를 여러 개 가질 수 있는 형태

네트워크 데이터베이스 = 아직도 LINKED 형태로 연결되어 있기 때문에 한 데이터가 수정되면 LINK된 모든 데이터를 수정해야 함

객체 지향 개념 - 상속 등등

파일 시스템 = 저장 이외에는 제공 기능이 없음
DBMS의 발전에 따라 프로그래밍 분량이 적어짐

분산 DBMS는 비용적인 이점이 있다 크기 100 가격 70 vs 크기 25 가격 10 4개
처리 속도는 늦어질 수 있다 DB들끼리는 정보가 어디에 있는지 알고 있어서 자신에게 정보가 있지 않는다면 다른 DB에 전달해야 함 따라서 처리 속도는 늦어질 수 있다
결국 데이터가 한 곳에 집중이 되어있냐, 여러 곳에 나누어져 있냐 차이

스키마 = 어떤 정보를 저장할지
인스턴스 = 상태
정의어 = 틀, 조작어 = 내용
질의의 절차를 표현 - 절차적 언어, 반대는 비절차적 언어

제어어 - 하나의 트랜잭션 예) 회원가입을 표현하기 위한 것